#!/usr/bin/env python3
"""
News Processing Pipeline
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
"""

import sqlite3
import json
import re
from datetime import datetime, timezone
from pathlib import Path
from typing import List, Dict, Tuple
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NewsProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    
    def __init__(self, db_path: str = "data/production_container_news.db"):
        self.db_path = Path(db_path)
        self.repo_root = Path("../../")  # –ö–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        
    def get_news_by_period(self, year: int, month: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥
            start_date = f"{year}-{month:02d}-01"
            if month == 12:
                end_date = f"{year+1}-01-01"
            else:
                end_date = f"{year}-{month+1:02d}-01"
            
            cursor = conn.execute('''
                SELECT * FROM production_news 
                WHERE pub_date >= ? AND pub_date < ?
                ORDER BY pub_date DESC, importance DESC
            ''', (start_date, end_date))
            
            return [dict(row) for row in cursor.fetchall()]
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            stats = {}
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            stats['total'] = conn.execute("SELECT COUNT(*) FROM production_news").fetchone()[0]
            
            # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            stats['by_category'] = dict(conn.execute(
                "SELECT category, COUNT(*) FROM production_news GROUP BY category ORDER BY COUNT(*) DESC"
            ).fetchall())
            
            # –ü–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
            stats['by_importance'] = dict(conn.execute(
                "SELECT importance, COUNT(*) FROM production_news GROUP BY importance ORDER BY importance DESC"
            ).fetchall())
            
            # –ü–æ —è–∑—ã–∫–∞–º
            stats['by_language'] = dict(conn.execute(
                "SELECT language, COUNT(*) FROM production_news GROUP BY language"
            ).fetchall())
            
            # –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            stats['security_count'] = conn.execute(
                "SELECT COUNT(*) FROM production_news WHERE security_related = 1"
            ).fetchone()[0]
            
            # –° —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏
            stats['with_version'] = conn.execute(
                "SELECT COUNT(*) FROM production_news WHERE version_mentioned != ''"
            ).fetchone()[0]
            
            # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            stats['top_sources'] = dict(conn.execute(
                "SELECT source_name, COUNT(*) FROM production_news GROUP BY source_name ORDER BY COUNT(*) DESC LIMIT 10"
            ).fetchall())
            
            # –ü–µ—Ä–∏–æ–¥ –ø–æ–∫—Ä—ã—Ç–∏—è
            date_range = conn.execute(
                "SELECT MIN(pub_date) as min_date, MAX(pub_date) as max_date FROM production_news"
            ).fetchone()
            stats['period'] = {
                'from': date_range[0],
                'to': date_range[1]
            }
            
        return stats
    
    def create_monthly_article(self, year: int, month: int) -> Tuple[str, str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –º–µ—Å—è—Ü–∞"""
        news_items = self.get_news_by_period(year, month)
        
        if not news_items:
            return "", ""
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        by_category = {}
        by_importance = {5: [], 4: [], 3: [], 2: [], 1: []}
        security_news = []
        releases = []
        
        for item in news_items:
            category = item['category']
            if category not in by_category:
                by_category[category] = []
            by_category[category].append(item)
            
            by_importance[item['importance']].append(item)
            
            if item['security_related']:
                security_news.append(item)
            
            if item['version_mentioned']:
                releases.append(item)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        month_names = {
            1: 'January', 2: 'February', 3: 'March', 4: 'April',
            5: 'May', 6: 'June', 7: 'July', 8: 'August',
            9: 'September', 10: 'October', 11: 'November', 12: 'December'
        }
        
        filename = f"index.md"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content = f"""# üì∞ Container Technologies News - {month_names[month]} {year}

**–°–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º –∑–∞ {month_names[month]} {year}**

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Å—è—Ü–∞

- **–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:** {len(news_items)}
- **–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:** {len(security_news)}
- **–†–µ–ª–∏–∑—ã —Å –≤–µ—Ä—Å–∏—è–º–∏:** {len(releases)}
- **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** {', '.join(sorted(by_category.keys()))}

## üî• –í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5)

"""
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        for item in by_importance[5][:10]:
            content += f"""### {item['title']}
- **–ò—Å—Ç–æ—á–Ω–∏–∫:** {item['source_name']}
- **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {item['category']}
- **–î–∞—Ç–∞:** {item['pub_date'][:10]}
- **–°—Å—ã–ª–∫–∞:** [{item['title'][:50]}...]({item['link']})

{item['description'][:200]}...

---

"""
        
        # –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        content += "## üìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n"
        
        for category in sorted(by_category.keys()):
            items = by_category[category][:5]  # –¢–æ–ø 5 –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            content += f"### {category.upper()} ({len(by_category[category])} –Ω–æ–≤–æ—Å—Ç–µ–π)\n\n"
            
            for item in items:
                content += f"- **[{item['title'][:60]}...]({item['link']})** "
                content += f"*{item['source_name']}* - {item['pub_date'][:10]}\n"
            
            content += "\n"
        
        # –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if security_news:
            content += "## üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n"
            for item in security_news[:5]:
                content += f"- **[{item['title']}]({item['link']})**\n"
                content += f"  *{item['source_name']}* - {item['pub_date'][:10]}\n"
                content += f"  {item['description'][:150]}...\n\n"
        
        # –†–µ–ª–∏–∑—ã
        if releases:
            content += "## üöÄ –†–µ–ª–∏–∑—ã\n\n"
            for item in releases[:10]:
                version = item['version_mentioned']
                content += f"- **{item['title']}** - `{version}`\n"
                content += f"  *{item['source_name']}* - [{item['title'][:40]}...]({item['link']})\n\n"
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = list(set(item['source_name'] for item in news_items))
        content += f"""## üì° –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(sources)})

{', '.join(sorted(sources))}

---

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π*  
*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M')}*
"""
        
        return filename, content
    
    def create_summary_report(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        stats = self.get_statistics()
        
        content = f"""# üìä Container Technologies News - –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç

**–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º**

## üéØ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:** {stats['total']}
- **–ü–µ—Ä–∏–æ–¥:** {stats['period']['from'][:10]} - {stats['period']['to'][:10]}
- **–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:** {stats['security_count']}
- **–° —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏:** {stats['with_version']}

## üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

"""
        
        for category, count in stats['by_category'].items():
            percentage = (count / stats['total']) * 100
            content += f"- **{category}:** {count} –Ω–æ–≤–æ—Å—Ç–µ–π ({percentage:.1f}%)\n"
        
        content += "\n## ‚≠ê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏\n\n"
        
        for importance, count in stats['by_importance'].items():
            percentage = (count / stats['total']) * 100
            content += f"- **–£—Ä–æ–≤–µ–Ω—å {importance}:** {count} –Ω–æ–≤–æ—Å—Ç–µ–π ({percentage:.1f}%)\n"
        
        content += "\n## üåê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫–∞–º\n\n"
        
        for language, count in stats['by_language'].items():
            percentage = (count / stats['total']) * 100
            content += f"- **{language}:** {count} –Ω–æ–≤–æ—Å—Ç–µ–π ({percentage:.1f}%)\n"
        
        content += "\n## üì° –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n\n"
        
        for source, count in list(stats['top_sources'].items())[:10]:
            percentage = (count / stats['total']) * 100
            content += f"- **{source}:** {count} –Ω–æ–≤–æ—Å—Ç–µ–π ({percentage:.1f}%)\n"
        
        content += f"""

## üîç –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤

### Kubernetes —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞
Kubernetes –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ä–µ–ª–∏–∑–æ–≤.

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
{stats['security_count']} –Ω–æ–≤–æ—Å—Ç–µ–π —Å–≤—è–∑–∞–Ω—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é, —á—Ç–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {(stats['security_count']/stats['total']*100):.1f}% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.

### –†–µ–ª–∏–∑—ã –ü–û
{stats['with_version']} –Ω–æ–≤–æ—Å—Ç–µ–π —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

---

*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*  
*–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}*
"""
        
        return content
    
    def update_main_readme(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ README —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        stats = self.get_statistics()
        readme_path = self.repo_root / "news" / "README.md"
        
        if not readme_path.exists():
            return
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π README
        with open(readme_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        new_stats_section = f"""## üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:** {stats['total']}
- **–ü–µ—Ä–∏–æ–¥ –ø–æ–∫—Ä—ã—Ç–∏—è:** {stats['period']['from'][:10]} - {stats['period']['to'][:10]}
- **–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:** {stats['security_count']}
- **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** {', '.join(list(stats['by_category'].keys())[:5])}
- **–Ø–∑—ã–∫–∏:** {', '.join(stats['by_language'].keys())}

*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M')}*

"""
        
        # –ó–∞–º–µ–Ω—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if "## üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in content:
            # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é
            pattern = r"## üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.*?(?=\n## |\n# |\Z)"
            content = re.sub(pattern, new_stats_section.strip(), content, flags=re.DOTALL)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            content += "\n" + new_stats_section
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π README
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        logger.info(f"README –æ–±–Ω–æ–≤–ª–µ–Ω: {readme_path}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description='News Processor for Repository Integration')
    parser.add_argument('--year', type=int, default=2024, help='Year to process')
    parser.add_argument('--month', type=int, help='Month to process (1-12)')
    parser.add_argument('--summary', action='store_true', help='Generate summary report')
    parser.add_argument('--update-readme', action='store_true', help='Update main README')
    
    args = parser.parse_args()
    
    processor = NewsProcessor()
    
    if args.summary:
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        summary = processor.create_summary_report()
        
        output_path = Path("data/summary_report.md")
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(summary)
        
        logger.info(f"–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    
    if args.month:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ {args.year}-{args.month:02d}...")
        filename, content = processor.create_monthly_article(args.year, args.month)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ—Å—è—Ü–∞
        month_dir = Path(f"../../{args.year}/{args.month:02d}")
        month_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é
        article_path = month_dir / filename
        with open(article_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        logger.info(f"–°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {article_path}")
    
    if args.update_readme:
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ README...")
        processor.update_main_readme()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = processor.get_statistics()
    logger.info("="*50)
    logger.info("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
    logger.info("="*50)
    logger.info(f"–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {stats['total']}")
    logger.info(f"–ü–µ—Ä–∏–æ–¥: {stats['period']['from'][:10]} - {stats['period']['to'][:10]}")
    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(stats['by_category'])}")
    logger.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(stats['top_sources'])}")
    logger.info(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {stats['security_count']}")
    logger.info("="*50)

if __name__ == "__main__":
    main()